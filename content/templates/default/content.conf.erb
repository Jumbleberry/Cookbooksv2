lua_shared_dict auto_ssl 5m;
lua_shared_dict auto_ssl_settings 64k;

init_by_lua_block {
  auto_ssl = (require "resty.auto-ssl").new()

<% if node["content"].key?("redis") %>
  auto_ssl:set("storage_adapter", "resty.auto-ssl.storage_adapters.redis")

  auto_ssl:set("redis", {
    host = "<%= node["content"]["redis"]["host"] %>",
    port = <%= node["content"]["redis"]["port"] || 6379 %>,
    db   = <%= node["content"]["redis"]["db"] || 1 %>
  })
<% end %>

  auto_ssl:set("allow_domain", function(domain)
    local p = io.popen('find "/var/www/content" -maxdepth 1 -type d -printf "%f\n"')
    for file in p:lines() do
      if file == domain or domain:sub(-(file:len() + 1)) == "." .. file then
        return true
      end
    end
    return false
  end)

  auto_ssl:set("dir", "/etc/nginx/ssl")

  auto_ssl:init()
}

init_worker_by_lua_block {
  auto_ssl:init_worker()
}

server {
  listen 443 ssl default_server backlog=4096;
  listen [::]:443 ssl default_server backlog=4096;

  set $upstream content;

  sendfile                  on;
  sendfile_max_chunk        4m;
  keepalive_timeout         120;

  open_file_cache           max=25000 inactive=300s;
  open_file_cache_valid     300s;
  open_file_cache_min_uses  2;
  open_file_cache_errors    on;

  ssl_certificate_by_lua_block {
    auto_ssl:ssl_certificate()
  }

  ssl_certificate           /etc/nginx/ssl/content.crt;
  ssl_certificate_key       /etc/nginx/ssl/content.key;

  ssl_protocols             TLSv1.2;
  ssl_prefer_server_ciphers on; 
  ssl_dhparam               /etc/nginx/dhparams.pem;
  ssl_ciphers               EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:EECDH+RC4:RSA+RC4:!MD5;
  ssl_ecdh_curve            secp384r1;
  ssl_session_timeout       10m;
  ssl_session_cache         shared:SSL:10m;
  ssl_session_tickets       off;
  ssl_stapling              on;
  ssl_stapling_verify       on;

  add_header                X-Content-Type-Options nosniff;
  add_header                X-XSS-Protection "1; mode=block";

  access_log                /var/log/nginx/content.access.log main buffer=4k flush=1m;
  error_log                 /var/log/nginx/content.error.log warn;

  set_by_lua_block $directory {
    if ngx.var.http_host ~= nil and ngx.var.http_host:match("([%w][%w%-]+[%w])%.([%a][%a]+)") ~= nil and ngx.var.http_host:match("content.jumble") == nil then
      local ngx_re  = require "ngx.re"
      local parts   = ngx_re.split(ngx.var.http_host or ngx.var.remote_ip, "[.]") or {}
      local part    = #parts
      local dir     = ""

      while part >= 1 and dir:len() <= 6 do
        dir  = parts[part] .. (dir:len() > 0 and ("." .. dir) or "")
        part = part - 1
      end

      return "/" .. dir
    end

    return ""
  }

  location / {
    root    /var/www/content;
    index   index.html index.htm;
    try_files $directory$uri $directory$uri.html $directory$uri/index.html $directory/index.html /index.html =404;
  }
}

server {
  listen 80 default_server backlog=4096;
  listen [::]:80 default_server backlog=4096;

  set $upstream content;

  sendfile                  on;
  sendfile_max_chunk        4m;
  keepalive_timeout         120;

  open_file_cache           max=25000 inactive=300s;
  open_file_cache_valid     300s;
  open_file_cache_min_uses  2;
  open_file_cache_errors    on;

  gzip                      off;

  location /.well-known/acme-challenge/ {
    content_by_lua_block {
      auto_ssl:challenge_server()
    }
  }

  location = /nginx {
    allow                   127.0.0.1;
    deny                    all;
    
    access_log              off;
    stub_status             on;
  }

  add_header                Strict-Transport-Security "max-age=63072000; preload";
  add_header                X-Content-Type-Options nosniff;
  add_header                X-XSS-Protection "1; mode=block";

  access_log                /var/log/nginx/content.access.log main buffer=4k flush=1m;
  error_log                 /var/log/nginx/content.error.log warn;

  set_by_lua_block $directory {
    if ngx.var.http_host ~= nil and ngx.var.http_host:match("([%w][%w%-]+[%w])%.([%a][%a]+)") ~= nil and ngx.var.http_host:match("content.jumble") == nil then
      local ngx_re  = require "ngx.re"
      local parts   = ngx_re.split(ngx.var.http_host or ngx.var.remote_ip, "[.]") or {}
      local part    = #parts
      local dir     = ""

      while part >= 1 and dir:len() <= 6 do
        dir  = parts[part] .. (dir:len() > 0 and ("." .. dir) or "")
        part = part - 1
      end

      return "/" .. dir
    end

    return ""
  }

  location / {
    if ($real_scheme != "https") {
        return 301 https://$http_host$request_uri;
    }

    root    /var/www/content;
    index   index.html index.htm;
    try_files $directory$uri $directory$uri.html $directory$uri/index.html $directory/index.html /index.html =404;
  }
}

server {
  listen 127.0.0.1:8999 backlog=4096;
  set $upstream content;

  client_body_buffer_size 128k;
  client_max_body_size 128k;

  location / {
    content_by_lua_block {
      auto_ssl:hook_server()
    }
  }
}
